import { AlwaysStencilFunc, BackSide, DecrementWrapStencilOp, FrontSide, Group, IncrementWrapStencilOp, Mesh, MeshBasicMaterial, NotEqualStencilFunc, PlaneGeometry, ReplaceStencilOp } from 'three';
// source: https://threejs.org/examples/webgl_clipping_stencil.html
export class IfcStencil {
    constructor(context, plane, planeMaterial) {
        this.root = new Group();
        this.stencilGroup = new Group();
        this.stencilObject = new Mesh();
        this.context = context;
        this.plane = plane;
        const planesCount = context.getClippingPlanes().length + 1;
        this.renderOrder = planesCount + 1;
        this.stencilMaterial = planeMaterial || new MeshBasicMaterial({ color: 0x000000 });
        this.setupPlaneMaterial();
        this.stencilMesh = this.getStencilMesh();
        this.setupStencil(this.context.items.ifcModels[0]);
    }
    setupStencil(mesh) {
        this.createPlaneStencilGroup(mesh.geometry);
        this.root.add(this.stencilGroup);
        const scene = this.context.getScene();
        scene.add(this.root);
        scene.add(this.stencilMesh);
    }
    updateStencilMaterial() {
        const planes = this.context.getClippingPlanes();
        this.stencilMaterial.clippingPlanes = planes.filter((plane) => plane !== this.plane);
    }
    getStencilMesh() {
        const mesh = new Mesh(IfcStencil.stencilGeometry, this.stencilMaterial);
        mesh.onAfterRender = (renderer) => {
            renderer.clearStencil();
        };
        mesh.renderOrder = this.renderOrder + 0.1;
        return mesh;
    }
    setupPlaneMaterial() {
        this.stencilMaterial.stencilWrite = true;
        this.stencilMaterial.stencilRef = 0;
        this.stencilMaterial.stencilFunc = NotEqualStencilFunc;
        this.stencilMaterial.stencilFail = ReplaceStencilOp;
        this.stencilMaterial.stencilZFail = ReplaceStencilOp;
        this.stencilMaterial.stencilZPass = ReplaceStencilOp;
        this.updateStencilMaterial();
    }
    createPlaneStencilGroup(geometry) {
        const baseMat = new MeshBasicMaterial();
        baseMat.depthWrite = false;
        baseMat.depthTest = false;
        baseMat.colorWrite = false;
        baseMat.stencilWrite = true;
        baseMat.stencilFunc = AlwaysStencilFunc;
        // back faces
        const mat0 = baseMat.clone();
        mat0.side = BackSide;
        mat0.clippingPlanes = [this.plane];
        mat0.stencilFail = IncrementWrapStencilOp;
        mat0.stencilZFail = IncrementWrapStencilOp;
        mat0.stencilZPass = IncrementWrapStencilOp;
        const mesh0 = new Mesh(geometry, mat0);
        mesh0.renderOrder = this.renderOrder;
        this.stencilGroup.add(mesh0);
        // front faces
        const mat1 = baseMat.clone();
        mat1.side = FrontSide;
        mat1.clippingPlanes = [this.plane];
        mat1.stencilFail = DecrementWrapStencilOp;
        mat1.stencilZFail = DecrementWrapStencilOp;
        mat1.stencilZPass = DecrementWrapStencilOp;
        const mesh1 = new Mesh(geometry, mat1);
        mesh1.renderOrder = this.renderOrder;
        this.stencilGroup.add(mesh1);
    }
}
IfcStencil.stencilGeometry = new PlaneGeometry(200, 200);
//# sourceMappingURL=stencil.js.map