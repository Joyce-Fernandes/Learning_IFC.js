import { CylinderGeometry, DoubleSide, Mesh, MeshBasicMaterial, Object3D, Plane, PlaneGeometry } from 'three';
import { TransformControls } from 'three/examples/jsm/controls/TransformControls';
import { IfcComponent } from '../../../base-types';
export class IfcPlane extends IfcComponent {
    constructor(context, origin, normal, onStartDragging, onEndDragging, planeSize) {
        super(context);
        this.arrowBoundingBox = new Mesh();
        this.visible = true;
        this.active = true;
        this.removeFromScene = () => {
            const scene = this.context.getScene();
            scene.remove(this.helper);
            scene.remove(this.controls);
            this.context.removeClippingPlane(this.plane);
        };
        this.planeSize = planeSize;
        this.context = context;
        this.plane = new Plane();
        this.planeMesh = this.getPlaneMesh();
        this.normal = normal;
        this.origin = origin;
        this.helper = this.createHelper();
        this.controls = this.newTransformControls();
        this.setupEvents(onStartDragging, onEndDragging);
        this.plane.setFromNormalAndCoplanarPoint(normal, origin);
    }
    setVisibility(visible) {
        this.visible = visible;
        this.helper.visible = visible;
        this.controls.visible = visible;
    }
    newTransformControls() {
        const camera = this.context.getCamera();
        const container = this.context.getDomElement();
        const controls = new TransformControls(camera, container);
        this.initializeControls(controls);
        const scene = this.context.getScene();
        scene.add(controls);
        return controls;
    }
    initializeControls(controls) {
        controls.attach(this.helper);
        controls.showX = false;
        controls.showY = false;
        controls.setSpace('local');
        this.createArrowBoundingBox();
        controls.children[0].children[0].add(this.arrowBoundingBox);
    }
    createArrowBoundingBox() {
        this.arrowBoundingBox.geometry = new CylinderGeometry(0.18, 0.18, 1.2);
        this.arrowBoundingBox.material = IfcPlane.hiddenMaterial;
        this.arrowBoundingBox.rotateX(Math.PI / 2);
        this.arrowBoundingBox.updateMatrix();
        this.arrowBoundingBox.geometry.applyMatrix4(this.arrowBoundingBox.matrix);
    }
    setupEvents(onStart, onEnd) {
        this.controls.addEventListener('change', () => {
            this.plane.setFromNormalAndCoplanarPoint(this.normal, this.helper.position);
        });
        this.controls.addEventListener('dragging-changed', (event) => {
            this.visible = !event.value;
            this.context.toggleCameraControls(this.visible);
            if (event.value)
                onStart();
            else
                onEnd();
        });
        this.context.ifcCamera.currentNavMode.onChangeProjection.on((camera) => {
            this.controls.camera = camera;
        });
    }
    createHelper() {
        const helper = new Object3D();
        helper.lookAt(this.normal);
        helper.position.copy(this.origin);
        const scene = this.context.getScene();
        scene.add(helper);
        helper.add(this.planeMesh);
        return helper;
    }
    getPlaneMesh() {
        const planeGeom = new PlaneGeometry(this.planeSize, this.planeSize, 1);
        return new Mesh(planeGeom, IfcPlane.planeMaterial);
    }
}
IfcPlane.planeMaterial = new MeshBasicMaterial({
    color: 0xffff00,
    side: DoubleSide,
    transparent: true,
    opacity: 0.2
});
IfcPlane.hiddenMaterial = new MeshBasicMaterial({ visible: false });
//# sourceMappingURL=planes.js.map