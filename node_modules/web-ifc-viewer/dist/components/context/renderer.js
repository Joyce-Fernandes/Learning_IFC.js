import { Vector2, WebGLRenderer } from 'three';
import { CSS2DRenderer } from 'three/examples/jsm/renderers/CSS2DRenderer';
import { BlendFunction, EffectComposer, EffectPass, NormalPass, RenderPass, SSAOEffect
// @ts-ignore
 } from 'postprocessing';
import * as dat from 'dat.gui';
import { IfcComponent } from '../../base-types';
import { IfcEvent } from './ifcEvent';
export class IfcRenderer extends IfcComponent {
    constructor(context) {
        super(context);
        this.ifcRenderer = new WebGLRenderer({
            powerPreference: 'high-performance',
            antialias: false,
            stencil: false,
            depth: false
        });
        this.renderer2D = new CSS2DRenderer();
        this.gui = new dat.GUI();
        this.context = context;
        this.container = context.options.container;
        this.setupRenderers();
        this.adjustRendererSize();
        this.postProductionRenderer = new EffectComposer(this.basicRenderer);
        this.context.events.subscribe(IfcEvent.onCameraReady, () => {
            const scene = this.context.getScene();
            const camera = this.context.getCamera();
            const normalPass = new NormalPass(scene, camera, {
                resolutionScale: 1.0
            });
            const ssaoEffect = new SSAOEffect(camera, normalPass.renderTarget.texture, {
                blendFunction: BlendFunction.MULTIPLY,
                // blendFunction: POSTPROCESSING.BlendFunction.ALPHA,
                samples: 32,
                rings: 5,
                distanceThreshold: 0.0,
                distanceFalloff: 1.0,
                rangeThreshold: 0.0,
                rangeFalloff: 1.0,
                luminanceInfluence: 0.0,
                scale: 0.6,
                radius: 0.03,
                bias: 0.03,
                intensity: 10.0
            });
            ssaoEffect.ssaoMaterial.uniforms.fade.value = 1;
            ssaoEffect.resolution.scale = 1.5;
            ssaoEffect.blendMode.opacity.value = 1.2;
            // Scale, Bias and Opacity influence intensity.
            ssaoEffect.blendMode.opacity.value = 1.0;
            const renderPass = new RenderPass(scene, camera);
            const effectPass = new EffectPass(camera, ssaoEffect);
            effectPass.renderToScreen = true;
            this.postProductionRenderer.addPass(renderPass);
            this.postProductionRenderer.addPass(normalPass);
            this.postProductionRenderer.addPass(effectPass);
            // this.gui.add(ssaoEffect, 'samples', 1, 32, 1);
            // this.gui.add(ssaoEffect, 'rings', 1, 16, 1);
            // this.gui.add(ssaoEffect, 'radius', 1e-6, 1.0, 0.001);
            // this.gui.add(ssaoEffect, 'distanceScaling').onChange((value) => {
            //   ssaoEffect.distanceScaling = value;
            // });
            // const effects = {
            //   intensity: 0,
            //   bias: 0,
            //   fade: 0,
            //   opacity: 1,
            //   resolution: 0.25
            // }
            // this.gui.add(effects, 'intensity', 0, 10, 0.25).onChange((value) => {
            //   ssaoEffect.ssaoMaterial.uniforms.intensity.value = value;
            // });
            //
            // this.gui.add(effects, 'bias', 0, 1.0, 0.001).onChange((value) => {
            //   ssaoEffect.ssaoMaterial.uniforms.bias.value = value;
            // });
            //
            // this.gui.add(effects, 'fade', 0, 1.0, 0.001).onChange((value) => {
            //   ssaoEffect.ssaoMaterial.uniforms.fade.value = value;
            // });
            //
            // this.gui.add(effects, 'opacity', 0, 3.0, 0.1).onChange((value) => {
            //   ssaoEffect.blendMode.opacity.value = value;
            // });
            //
            // this.gui.add(effects, 'resolution', 0, 3.0, 0.25).onChange((value) => {
            //   ssaoEffect.resolution.scale = value;
            // });
        });
    }
    update(_delta) {
        const scene = this.context.getScene();
        const camera = this.context.getCamera();
        this.postProductionRenderer.render();
        this.renderer2D.render(scene, camera);
    }
    getSize() {
        return new Vector2(this.basicRenderer.domElement.clientWidth, this.basicRenderer.domElement.clientHeight);
    }
    adjustRendererSize() {
        var _a;
        this.basicRenderer.setSize(this.container.clientWidth, this.container.clientHeight);
        this.renderer2D.setSize(this.container.clientWidth, this.container.clientHeight);
        (_a = this.postProductionRenderer) === null || _a === void 0 ? void 0 : _a.setSize(this.container.clientWidth, this.container.clientHeight);
    }
    setupRenderers() {
        this.basicRenderer.localClippingEnabled = true;
        this.container.appendChild(this.basicRenderer.domElement);
        this.renderer2D.domElement.style.position = 'absolute';
        this.renderer2D.domElement.style.top = '0px';
        this.renderer2D.domElement.style.pointerEvents = 'none';
        this.container.appendChild(this.renderer2D.domElement);
    }
}
//# sourceMappingURL=renderer.js.map