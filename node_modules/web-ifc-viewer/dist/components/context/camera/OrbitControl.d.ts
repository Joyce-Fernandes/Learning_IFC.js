import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { Camera, Mesh, OrthographicCamera, PerspectiveCamera, Vector3 } from 'three';
import { CameraProjections, Context, IfcComponent, MouseButtons, NavigationMode, NavigationModes } from '../../../base-types';
import { LiteEvent } from '../../../utils/LiteEvent';
export declare class OrbitControl extends IfcComponent implements NavigationMode {
    private context;
    private perspectiveCamera;
    private orthographicCamera;
    orbitControls: OrbitControls;
    enabled: boolean;
    currentCamera: Camera;
    readonly mode = NavigationModes.Orbit;
    readonly onChange: LiteEvent<unknown>;
    readonly onUnlock: LiteEvent<unknown>;
    readonly onChangeProjection: LiteEvent<Camera>;
    private currentTarget;
    private onlyPanningAllowed;
    private startView;
    constructor(context: Context, perspectiveCamera: PerspectiveCamera, orthographicCamera: OrthographicCamera);
    get activeCamera(): Camera;
    get target(): Vector3;
    get panOnlyMode(): boolean;
    set panOnlyMode(active: boolean);
    set minDistance(min: number);
    set maxDistance(max: number);
    set homeView({ camera, target }: {
        camera: Vector3;
        target: Vector3;
    });
    get projection(): CameraProjections;
    set projection(projection: CameraProjections);
    setOrbitControlsButtons(buttons: MouseButtons): void;
    update(_delta: number): void;
    /**
     * @deprecated Use onChange.on() instead.
     */
    submitOnChange(action: (event: any) => void): void;
    /**
     * @deprecated Use onChange.on() instead.
     */
    submitOnUnlock(action: (event: any) => void): void;
    toggleProjection(): void;
    toggle(active: boolean, options?: any): void;
    targetItem: (mesh: Mesh, duration: number) => void;
    goTo(position: Vector3, target: Vector3, duration: number): void;
    goToHomeView(): void;
    fitModelToFrame(): void;
    private getBoxCenterAndDistance;
    private adjustTarget;
    private setupOrbitControls;
}
