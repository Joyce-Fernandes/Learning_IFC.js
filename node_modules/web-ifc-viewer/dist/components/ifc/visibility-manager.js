import { MeshBasicMaterial } from 'three';
export class VisibilityManager {
    constructor(loader, context) {
        this.modelMaterials = {};
        this.invisibleMaterial = new MeshBasicMaterial({ visible: false });
        this.ifc = loader;
        this.context = context;
        this.scene = this.context.getScene();
    }
    isolateItems(modelID, ids, removePrevious = true, material) {
        this.isolate(modelID, ids, removePrevious);
        this.changeModelMaterial(modelID, material);
        this.makeIsolatedItemsPickable(modelID);
    }
    removeIsolation(modelID) {
        const mesh = this.context.items.ifcModels.find((ifcMesh) => ifcMesh.modelID === modelID);
        if (mesh) {
            this.ifc.ifcManager.removeSubset(modelID, this.scene);
            this.context.items.pickableIfcModels.push(mesh);
            this.restoreModelMaterial(modelID);
            this.makeOriginalModelPickable(modelID);
        }
    }
    changeModelMaterial(modelID, material) {
        const mesh = this.getMesh(modelID);
        if (mesh) {
            this.modelMaterials[mesh.modelID] = mesh.material;
            mesh.material = material || this.invisibleMaterial;
        }
    }
    restoreModelMaterial(modelID) {
        const mesh = this.getMesh(modelID);
        if (this.modelMaterials[modelID] && mesh) {
            mesh.material = this.modelMaterials[modelID];
        }
    }
    makeOriginalModelPickable(model) {
        const originalModel = this.context.items.ifcModels.find((mesh) => mesh.modelID === model);
        if (originalModel) {
            this.removePickableItem(model);
            this.context.items.pickableIfcModels.push(originalModel);
        }
    }
    removePickableItem(modelID) {
        this.context.items.pickableIfcModels = this.context.items.pickableIfcModels.filter((ifcMesh) => {
            return ifcMesh.modelID !== modelID;
        });
    }
    makeIsolatedItemsPickable(model) {
        this.removePickableItem(model);
        const isolatedItems = this.ifc.ifcManager.getSubset(model);
        if (isolatedItems) {
            isolatedItems.modelID = model;
            this.context.items.pickableIfcModels.push(isolatedItems);
        }
    }
    getMesh(modelID) {
        return this.context.items.ifcModels.find((model) => model.modelID === modelID);
    }
    isolate(modelID, ids, removePrevious) {
        if (ids.length === 0) {
            this.ifc.ifcManager.removeSubset(modelID, this.scene);
            return;
        }
        this.ifc.ifcManager.createSubset({
            scene: this.scene,
            ids,
            modelID,
            removePrevious
        });
    }
}
//# sourceMappingURL=visibility-manager.js.map